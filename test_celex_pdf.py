#!/usr/bin/env python3
"""
Test sp√©cifique pour le fichier CELEX PDF
Teste l'extraction des m√©tadonn√©es et la g√©n√©ration du JSON
"""

import os
import sys
import json
import time
from pathlib import Path

# Ajouter le r√©pertoire du projet au path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Imports Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'data_structure.settings')
import django
django.setup()

from documents.services.fast_ai_service import FastAIService
from documents.services.document_processor import DocumentProcessor
from documents.services.metadata_extractor import MetadataExtractor

def test_celex_pdf():
    """Test complet avec le fichier CELEX PDF"""
    
    print("=" * 60)
    print("TEST DU FICHIER CELEX PDF")
    print("=" * 60)
    
    # Chemin du fichier
    pdf_path = "media/documents/2025/08/12/CELEX_52013XC080204_EN_TXT.pdf"
    
    if not os.path.exists(pdf_path):
        print(f"‚ùå Fichier non trouv√©: {pdf_path}")
        return False
    
    print(f"üìÑ Fichier trouv√©: {pdf_path}")
    print(f"üìä Taille: {os.path.getsize(pdf_path):,} bytes")
    
    # 1. Test de l'extraction des m√©tadonn√©es
    print("\n" + "=" * 40)
    print("1. EXTRACTION DES M√âTADONN√âES")
    print("=" * 40)
    
    try:
        metadata_extractor = MetadataExtractor()
        metadata = metadata_extractor.extract_metadata(pdf_path)
        
        print("‚úÖ M√©tadonn√©es extraites:")
        for key, value in metadata.items():
            print(f"   {key}: {value}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'extraction des m√©tadonn√©es: {e}")
        return False
    
    # 2. Test de l'extraction du contenu
    print("\n" + "=" * 40)
    print("2. EXTRACTION DU CONTENU")
    print("=" * 40)
    
    try:
        # Extraction directe du contenu PDF
        import PyPDF2
        with open(pdf_path, 'rb') as f:
            reader = PyPDF2.PdfReader(f)
            content = ""
            for page in reader.pages:
                content += page.extract_text() + "\n"
        
        print(f"‚úÖ Contenu extrait: {len(content):,} caract√®res")
        print(f"üìù Aper√ßu (premiers 500 caract√®res):")
        print("-" * 40)
        print(content[:500] + "..." if len(content) > 500 else content)
        print("-" * 40)
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'extraction du contenu: {e}")
        return False
    
    # 3. Test du service AI
    print("\n" + "=" * 40)
    print("3. TEST DU SERVICE AI")
    print("=" * 40)
    
    try:
        ai_service = FastAIService()
        
        # Test de connexion
        print("üîå Test de connexion √† Ollama...")
        if not ai_service._test_connection():
            print("‚ùå Impossible de se connecter √† Ollama")
            return False
        print("‚úÖ Connexion √† Ollama r√©ussie")
        
        # Test d'analyse du type de document
        print("\nüîç Analyse du type de document...")
        start_time = time.time()
        
        # Pr√©paration des m√©tadonn√©es pour l'analyse
        analysis_metadata = {
            'filename': os.path.basename(pdf_path),
            'file_size': os.path.getsize(pdf_path),
            'mime_type': "application/pdf"
        }
        
        document_type = ai_service.analyze_document_type(
            metadata=analysis_metadata,
            content=content[:10000]  # Premier 10k caract√®res pour l'analyse
        )
        analysis_time = time.time() - start_time
        
        print(f"‚úÖ Type de document d√©tect√©: {document_type}")
        print(f"‚è±Ô∏è  Temps d'analyse: {analysis_time:.2f} secondes")
        
        # Test de g√©n√©ration du sch√©ma
        print("\nüìã G√©n√©ration du sch√©ma d'annotation...")
        start_time = time.time()
        
        # Ajout du type de document aux m√©tadonn√©es
        metadata['document_type'] = document_type
        
        schema = ai_service.generate_annotation_schema(
            document_metadata=metadata,
            document_content=content[:20000]  # Premier 20k caract√®res pour le sch√©ma
        )
        schema_time = time.time() - start_time
        
        print(f"‚úÖ Sch√©ma g√©n√©r√© en {schema_time:.2f} secondes")
        print("üìã Structure du sch√©ma:")
        print(json.dumps(schema, indent=2, ensure_ascii=False))
        
        # Test de g√©n√©ration des pr√©-annotations
        print("\nüè∑Ô∏è  G√©n√©ration des pr√©-annotations...")
        start_time = time.time()
        annotations = ai_service.generate_pre_annotations(
            content=content[:30000],  # Premier 30k caract√®res pour les annotations
            schema=schema
        )
        annotation_time = time.time() - start_time
        
        print(f"‚úÖ Pr√©-annotations g√©n√©r√©es en {annotation_time:.2f} secondes")
        print("üè∑Ô∏è  Annotations g√©n√©r√©es:")
        print(json.dumps(annotations, indent=2, ensure_ascii=False))
        
        # R√©sum√© des performances
        total_time = analysis_time + schema_time + annotation_time
        print(f"\nüìä R√âSUM√â DES PERFORMANCES:")
        print(f"   - Analyse du type: {analysis_time:.2f}s")
        print(f"   - G√©n√©ration du sch√©ma: {schema_time:.2f}s")
        print(f"   - Pr√©-annotations: {annotation_time:.2f}s")
        print(f"   - Temps total: {total_time:.2f}s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test du service AI: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage du test CELEX PDF...")
    
    success = test_celex_pdf()
    
    if success:
        print("\n" + "=" * 60)
        print("‚úÖ TEST R√âUSSI!")
        print("=" * 60)
        print("Le service AI fonctionne correctement avec le fichier CELEX PDF.")
        print("- Extraction des m√©tadonn√©es: ‚úÖ")
        print("- Extraction du contenu: ‚úÖ")
        print("- Analyse du type de document: ‚úÖ")
        print("- G√©n√©ration du sch√©ma JSON: ‚úÖ")
        print("- G√©n√©ration des pr√©-annotations: ‚úÖ")
    else:
        print("\n" + "=" * 60)
        print("‚ùå TEST √âCHOU√â!")
        print("=" * 60)
        print("Des erreurs ont √©t√© rencontr√©es lors du test.")
        sys.exit(1)

if __name__ == "__main__":
    main()
